app = Flask(__name__)

login_manager = LoginManager()
login_manager.init_app(app)
db = database.Database()

app.secret_key="12345"

@login_manager.user_loader
def load_user(user_id):
    return User.get(user_id)

class User():

    def __init__(self, id):
        self.id = id

    def is_authenticated(self):
        return True

    def is_active():
        return True

    def is_anonymous():
        return False

    def get_id(self):
        return self.id

    @classmethod 
    def get(cls,id):
       return User(id)


def is_safe_url(target):
    ref_url = urlparse(request.host_url)
    test_url = urlparse(urljoin(request.host_url, target))
    return test_url.scheme in ('http','https') and \
           ref_url.netloc == test_url.netloc


@app.route("/homepage")
@login_required
def homepage():

    posts = db.get_all_posts_by_id(current_user.id)
    user = db.get_user_by_Id(current_user.id)[0]
    if (posts == None):
        posts = []
     
    return render_template('main.html', posts=posts, Id=current_user, user=user, title = "My feed")




@app.route("/comments/<int:post_id>")
def comments(post_id):
    post = test_posts[post_id]
    return render_template('comments.html', title="Comments", post = post)

@app.route("/create", methods=['POST'])  
def create():
    post_content = request.form['post-content']
    db.insert_post(current_user.id, post_content) 
    return redirect(url_for('homepage'))


@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))


/////////////////////////////////////////////////////
DB file
///////////////////////////////////////////////////




    def like_post(self, user, post_id):
      self.execute_void_query("""INSERT INTO Likes (Name,PostId) VALUES (?,?)""",user,post_id)
        

 
    def like_count(self, post_id):
        data = self.execute_return_query("""SELECT COUNT(*) FROM Counts WHERE  PostId=? AND User=?""",post_id)
        return len(data)

    def already_liked(self,user, post_id):
        conn = sqlite3.connect('zedchat.db')
        cur = conn.cursor()
        self.execute_return_query("""SELECT COUNT(*) FROM Likes WHERE  PostId = ? AND User = ?""",user,post_id)
        for row in cur:
            return (row[0] > 0)      

    def unlike_post(self, user, post_id):
        self.execute_void_query("""DELETE FROM likes WHERE User=? And PostId=?""",user,post_id)

    def toggle_like(self,user,post_id):
        if self.already_liked(user,post_id):
            action = 'unlike'
            self.unlike_post(user,post_id)
        else:
                action = 'like'
                self.like_post(user,post_id)
        return {
                'like_count' : self.like_count(post_id),
                'action' : action
        } 

    def delete_post(self, post_id, user):
        self.execute_void_query("""DELETE FROM Posts WHERE Id=? And User=?""", post_id, user)



//////////////////////////////////////////////////////////////////////////
picture in main.html
<img src="{{url_for('static', filename=post['Picture'])}}" alt="Image">
//////////////////////////////////////////////////////////////////////////////